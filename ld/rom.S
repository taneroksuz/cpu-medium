#include "encoding.h"

#define UART_RX 0x1000000
#define UART_TX 0x1000004
#define SRAM_BASE 0x80000000
#define SRAM_SIZE 0x80000

#ifdef __riscv64
# define LREG ld
# define SREG sd
# define REGBYTES 8
#else
# define LREG lw
# define SREG sw
# define REGBYTES 4
#endif

  .global _start
_start:
  li  x1, 0
  li  x2, 0
  li  x3, 0
  li  x4, 0
  li  x5, 0
  li  x6, 0
  li  x7, 0
  li  x8, 0
  li  x9, 0
  li  x10,0
  li  x11,0
  li  x12,0
  li  x13,0
  li  x14,0
  li  x15,0
  li  x16,0
  li  x17,0
  li  x18,0
  li  x19,0
  li  x20,0
  li  x21,0
  li  x22,0
  li  x23,0
  li  x24,0
  li  x25,0
  li  x26,0
  li  x27,0
  li  x28,0
  li  x29,0
  li  x30,0
  li  x31,0

  li t0, MSTATUS_FS | MSTATUS_XS | MSTATUS_VS | MSTATUS_MIE
  csrs mstatus, t0

  li t0, 0xB | 0x7 | 0x3
  csrs mie, t0

#ifdef __riscv_flen
  la t0, 1f
  csrw mtvec, t0

  fssr    x0
  fmv.s.x f0, x0
  fmv.s.x f1, x0
  fmv.s.x f2, x0
  fmv.s.x f3, x0
  fmv.s.x f4, x0
  fmv.s.x f5, x0
  fmv.s.x f6, x0
  fmv.s.x f7, x0
  fmv.s.x f8, x0
  fmv.s.x f9, x0
  fmv.s.x f10,x0
  fmv.s.x f11,x0
  fmv.s.x f12,x0
  fmv.s.x f13,x0
  fmv.s.x f14,x0
  fmv.s.x f15,x0
  fmv.s.x f16,x0
  fmv.s.x f17,x0
  fmv.s.x f18,x0
  fmv.s.x f19,x0
  fmv.s.x f20,x0
  fmv.s.x f21,x0
  fmv.s.x f22,x0
  fmv.s.x f23,x0
  fmv.s.x f24,x0
  fmv.s.x f25,x0
  fmv.s.x f26,x0
  fmv.s.x f27,x0
  fmv.s.x f28,x0
  fmv.s.x f29,x0
  fmv.s.x f30,x0
  fmv.s.x f31,x0
1:
#endif

  la t0, trap_entry
  csrw mtvec, t0

  la t0, UART_RX
  la t1, SRAM_BASE

  la t2, 0
  la t3, SRAM_SIZE

loop:

  j loop

trap_entry:

  # uart irpt
  li t0, 0x18 

  csrr t1, mcause
  bne t0, t1, loop

copy_firmware:

  LREG t4,0(t0)
  SREG t4,0(t1)

  addi t1,t1,REGBYTES
  addi t2,t2,REGBYTES

  bge t2,t3,init

  mret

init:

  la ra, SRAM_BASE

  jalr zero, 0(ra)